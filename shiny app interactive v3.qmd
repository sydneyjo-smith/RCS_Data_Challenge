---
title: "Cancer Data"
format: html
runtime: shiny
---
```{r}
#| echo: false
library(reactable)
library(dplyr)
library(tidyverse)
library(shiny)
```

```{r}
#| echo: false
Data_Guys_20<-readRDS("./Data_Guys_20.RDS")
table1<-readRDS("./table1.RDS")
table2<-readRDS("./table2.RDS")
```


```{r}
#| echo: false
library(shiny)

tables <- list(
  "Guys and St Thomas_Q2" = table1,
  "South Tyneside and Sunderland NHS Foundation Trust_Q1" = table2
)
```

```{r}

#| echo: false

get_color <- function(value) {
  if (is.na(value)) return("black")  # Default color for NA
  
  # Define color scales
  red_palette <- colorRampPalette(c("#ffcccc", "#ff0000")) # Light to dark red
  green_palette <- colorRampPalette(c("#ccffcc", "#008000")) # Light to dark green
  
  # Compute the scaling for red (negative values)
  if (value < 0) {
    # Categorize values into ranges
    if (value >= -10) {
      color_index <- 2  # Light red for values between 0 and -10
    } else if (value >= -20) {
      color_index <- 6  # Medium red for values between -10 and -20
    } else {
      color_index <- 10  # Dark red for values less than -20
    }
    return(red_palette(10)[color_index])  # Use red gradient with specified index
  }
  
  # Compute the scaling for green (positive values)
  if (value > 0) {
    # Calculate the difference from 100 for green
    diff_scaled <- (100 - value) * 0.1  # Adjust the factor to control the sensitivity for green
    color_index <- min(10, ceiling(diff_scaled))  # Scale to 10 levels
    return(green_palette(10)[color_index])  # Use green gradient
  }
  
  # Neutral color for 0
  return("white")
}

```


```{r}
#| echo: false
ui <- fluidPage(
  titlePanel("Dropdown List"),
  sidebarLayout(
    sidebarPanel(
             selectInput("hospital", "Choose an option:", 
                  choices = c("South Tyneside and Sunderland NHS Foundation Trust", "Guys and St Thomas", 
                              "Ashford and St Peters Hospitals NHS Foundation Trust")),
      selectInput("quarter_year", "Choose a Quarter:", choices = c("Q1", "Q2")),
      HTML("
    <div style='margin-top: 20px;'>
      <h4>Legend for Color Gradient:</h4>
      <div style='display: flex;'>
        <div style='width: 20px; height: 20px; background-color: #ffcccc;'></div><span>0 to -10</span>
      </div>
      <div style='display: flex;'>
        <div style='width: 20px; height: 20px; background-color: #ff6666;'></div><span>-10 to -20</span>
      </div>
      <div style='display: flex;'>
        <div style='width: 20px; height: 20px; background-color: #ff0000;'></div><span>less than -20</span>
      </div>
      <div style='display: flex;'>
        <div style='width: 20px; height: 20px; background-color: #ccffcc;'></div><span>0 to 10 (light green)</span>
      </div>
      <div style='display: flex;'>
        <div style='width: 20px; height: 20px; background-color: #008000;'></div><span>closer to 100 (dark green)</span>
      </div>
    </div>
  ")
                  ),
           mainPanel(
               uiOutput("table"),
                  )
        ))

server <- function(input, output, session) {
 output$table <- renderUI({
    
    table_key <- paste(input$hospital, input$quarter_year, sep = "_")
    
    # Retrieve the correct dataset
    if (table_key %in% names(tables)) {
      tables[[table_key]]
    } else {
      NULL  # In case of missing data
    }
  })
}


shinyApp(ui, server)
```

