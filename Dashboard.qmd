---
title: "Cancer services"
format: 
  dashboard:
    theme: minty
server: shiny
---


```{r}
#| context: setup
library(ggplot2)
library(readr)
library(shiny)
library(dplyr)
library(tidyr)
library(plotly)
library(bslib)
library(bsicons)
library(reactable)
library(tidyverse)
library(markdown)


# Loading in plot data
indicators_trust <- read_csv("data/processed_data/indicators_trust.csv")
plot1<-read_csv("data/processed_data/data_plot_1.csv")
plot_2_data<-read_csv("data/processed_data/data_plot_2.csv")
plot_3_data <- read_csv("data/processed_data/data_plot_3.csv")

# Creating ordered list of quarter years for plot 2 and 3 data/plot 
unique_quarters <- indicators_trust %>%
  group_by(date, quarter_year) %>%
  summarise(date = first(date)) %>%
  ungroup %>%
  arrange(date)

quarter_levels <- unique_quarters$quarter_year

plot_2_data$quarter_year <- factor(plot_2_data$quarter_year, levels= quarter_levels )
plot_3_data$quarter_year <- factor(plot_3_data$quarter_year, levels= quarter_levels )


# Creating lists for use in dropdown selections on side bar
trust_list <- unique(indicators_trust$trust_name)
audit_list <- unique(indicators_trust$audit_name_full)
quarter_list <- unique(indicators_trust$quarter_year)
palette_list <- c("Standard", "Colour vision deficiency")
decimal_list <- c(0,1,2)
marker_list <- c("Case Volume", "Wilson Score Confidence Interval")
```

# Quarterly Summary 

## {.sidebar width="25%"}
```{r}
# Dropdown lists for quarterly summary table
selectInput('trust_name', 'Select Hospital:', trust_list) 
selectInput('quarter_year', 'Select Quarter:', quarter_list) 
selectInput('palette_choice', 'Select Colour Mode:', palette_list) 
selectInput('decimal_places', 'Decimal Places:', c(0,1,2)) 
```

Standard colour mode:
<ul>
  <li style="color: rgb(162, 218, 21);">Green = Performing better than comparison</li>
  <li style="color: rgb(228, 42, 88);">Red = Performing worse than comparison</li>
</ul>

Colour vision deficiency colour mode:
Standard:
<ul>
  <li style="color: rgb(255, 149, 0);">Orange = Performing better than comparison</li>
  <li style="color: rgb(92, 135, 228);">Blue = Performing worse than comparison</li>
</ul>

Note: Blank cells are values that have been supressed or not reported


## Summary

### Row {height=10%}
```{r}
# Display page title based on dropdown selections
uiOutput("dynamic_title")
```
### Row {height=90%}
```{r}
# Display quarterly summary table based on dropdown selections
reactableOutput("table_1")
```


```{r}
#| context: server

# Dynamic title based on user selection
output$dynamic_title <- renderUI({
     req(input$trust_name, input$trust_name)  # Ensure inputs exist
      tags$p(paste("Quarterly Performance Summary -", input$trust_name, ",", input$quarter_year), 
             style = "font-size: 20px;")
})

# Reactive dataset based on user selection
plot_1_dataset <- reactive({
  req(input$trust_name, input$trust_name)  # Ensure inputs exist
  plot1 %>%
    filter(trust_name == input$trust_name & quarter_year == input$quarter_year)
})

# Return colour palette based on user selection
selected_palet <- reactive({
  req(input$palette_choice)  # Ensure inputs exist
  if(input$palette_choice == "Standard"){
      return (function(x) rgb(colorRamp(c("#E42A58","#ffffff", "#A2DA15"))(x), maxColorValue = 255))
  }else if (input$palette_choice == "Colour vision deficiency"){
      return (function(x) rgb(colorRamp(c("#5C87E4","#ffffff", "#ff9500"))(x), maxColorValue = 255))
  }
})

# Return decimal places based on user selection
selected_decimal_places <- reactive({
  req(input$decimal_places)  # Ensure inputs exist
  return (as.numeric(input$decimal_places))
})

# Minimum and maximum values for the table colours - values outside of this 
# range are held at the selected colour palette 
min_val <- -0.25
max_val <- 0.25

# Create output table based on user selections
output$table_1 <- renderReactable({
  data <- plot_1_dataset()  # Store reactive dataset in a variable

 table_1<-reactable(data,
                   defaultPageSize = 50,
                   filterable = TRUE,
                   searchable = TRUE,
                   columns = list(
                     audit=colDef(show=FALSE),
                     trust_code=colDef(show=FALSE),
                     trust_name=colDef(show=FALSE),
                     quarter_year=colDef(show=FALSE),
                     audit_name_full = colDef(show=FALSE),
                     metric_type = colDef(show=FALSE),
                     RowType = colDef(show=FALSE),
                     metric_name = colDef(
                       name = "Metric Name"),
                     denominator = colDef(name="Case Volume",
                                          style = function(value, index) {
                                          list(fontWeight = "bold", color="black")
                                  }),
                     mav = colDef(name = "Current Quarter Moving Average (%)",
                                  format = colFormat(percent = TRUE,digits = selected_decimal_places()),
                                  style = function(value, index) {
                                    list(fontWeight = "bold", color="black")
                                  }),
                     variance_prev = colDef( name="Comparison to Previous Quarter Moving Average (%)",
                                                     format = colFormat(percent = TRUE,digits = selected_decimal_places()),
                                                     style = function(value, index) {
                                                       row_type <- data[index, "RowType"]  # Get RowType
                                                       
                                                       if (is.na(value)) {
                                                         if (row_type == "Header") {
                                                           return(list(background = "#78C2AD", color = "white"))  # Blue background for Header NA
                                                         } else {
                                                           return(list(background = "white", color = "black"))  # White background for non-Header NA
                                                         }
                                                       }
                                                       
                                                       # Normal styling for non-NA values
                                                       normalized <- (value - (min_val)) / (max_val - (min_val))  # Adjust min/max as needed
                                                       normalized <- max(0, min(1, normalized))  # Clamp values
                                                       color <- selected_palet()(normalized)
                                                       list(background = color,fontWeight = "bold", color="black")
                                                     }
                     ),
                     variance_ca = colDef( name="Comparison to Cancer Alliance Average (%)",
                                                     format = colFormat(percent = TRUE,digits = selected_decimal_places()),
                                                     style = function(value, index) {
                                                       row_type <- data[index, "RowType"]  # Get RowType
                                                       
                                                       if (is.na(value)) {
                                                         if (row_type == "Header") {
                                                           return(list(background = "#78C2AD", color = "white"))  # Blue background for Header NA
                                                         } else {
                                                           return(list(background = "white", color = "black"))  # White background for non-Header NA
                                                         }
                                                       }
                                                       
                                                       # Normal styling for non-NA values
                                                       normalized <- (value - (min_val)) / (max_val - (min_val))  # Adjust min/max as needed
                                                       normalized <- max(0, min(1, normalized))  # Clamp values
                                                       color <- selected_palet()(normalized)
                                                       list(background = color,fontWeight = "bold", color="black")
                                                     }
                     ),
                     variance_nat = colDef(name="Comparison to National Average (%)",
                                       format = colFormat(percent = TRUE,digits = selected_decimal_places()),
                                       style = function(value, index) {
                                         row_type <- data[index, "RowType"]  # Get RowType
                                         
                                         if (is.na(value)) {
                                           if (row_type == "Header") {
                                             return(list(background = "#78C2AD", color = "white"))  # Blue background for Header NA
                                           } else {
                                             return(list(background = "white", color = "black"))  # White background for non-Header NA
                                           }
                                         }
                                         
                                         # Normal styling for non-NA values
                                         normalized <- (value - (min_val)) / (max_val - (min_val))  # Adjust min/max as needed
                                         normalized <- max(0, min(1, normalized))  # Clamp values
                                         color <- selected_palet()(normalized)
                                         list(background = color,fontWeight = "bold", color="black")
                                       }
                     )
                   ),
                   rowStyle = function(index) {
                     if (data$RowType[index] == "Header") {
                       return(list(
                         background = "#78C2AD",
                         color = "white",
                         fontWeight = "bold"
                       ))  # Entire row is blue with white bold text
                     } else {
                       return(NULL)  # Default row style
                     }
                   }
)

table_1
}) 
                    
```


# Performance

## {.sidebar width="25%"}
```{r}
# Dropdown lists for Performance page, including plot 2 and 3
selectInput('trust_name', 'Select Hospital:', trust_list) 
selectInput('audit_name_full', 'Select Cancer Audit:', audit_list) 
selectInput('palette_choice', 'Select Colour Mode:', palette_list) 
selectInput('marker_choice', 'Select Confidence Indicator:', marker_list) 
```

## Row {.tabset}

### Data quality

```{r}
# Display plot 2 - data quality heatmap 
plotlyOutput('plot_2')
```


```{r}
#| context: server

# Reactive dataset based on user selections
plot_2_dataset <- reactive({
  req(input$trust_name, input$audit_name_full)  # Ensure inputs exist
  plot_2_data %>%
    filter(trust_name == input$trust_name & audit_name_full == input$audit_name_full)
})

# Colour palette dataset based on user user selections
selected_palet_2 <- reactive({
  req(input$palette_choice)  # Ensure inputs exist
  if(input$palette_choice == "Standard"){
      return (c("#78C2AD","#EFCD60", "#F56085", "#DDDDDD"))

  }else if (input$palette_choice == "Colour vision deficiency"){
      return (c("#EA8547", "#D45F98","#86A3E9", "#DDDDDD"))
  }
})

# Render plot 2 based on user selections
output$plot_2 <- renderPlotly({

  # Define color mapping for ggplot
color_mapping <- c("Missing" = selected_palet_2()[4], "Below Target" = selected_palet_2()[3], "Within 2% of Target" = selected_palet_2()[2], "Met Target" = selected_palet_2()[1])

# Create ggplot heatmap
gg_heatmap <- ggplot(plot_2_dataset(), aes(x = quarter_year, y = metric_name, fill = as.factor(status), text = text)) +
  geom_tile(color = "azure2", size = 1) +  # Black gridlines for cell borders
  scale_fill_manual(values = color_mapping, name = "Status",
                    labels = c("Missing", "Below Target", "Within 2% of Target", "Met Target")) +
  labs(title = "Data Quality Across Quarter Years", x = "", y = "") +
  scale_y_discrete(labels = function(x) str_wrap(x, width = 30)) +
  theme_classic() +
  theme(plot.title = element_text(hjust= 0.5),
    axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom")

# Convert to interactive plotly heatmap
plotly_heatmap <- ggplotly(gg_heatmap, tooltip = "text")

# Display interactive heatmap
plotly_heatmap
    
})

```
### Performance indicators

```{r}
# Display plot 3 - Performance indicator lineplot 
plotlyOutput('plot_3')
```

```{r}
#| context: server

# Reactive dataset based on user selections
plot_3_dataset <- reactive({
  req(input$trust_name, input$audit_name_full)  # Ensure inputs exist
  plot_3_data %>%
    filter(trust_name == input$trust_name & audit_name_full == input$audit_name_full)
})

# Return marker choice based on user selection
selected_marker <- reactive({
  req(input$marker_choice)  # Ensure inputs exist
  return (input$marker_choice)
})
 

output$plot_3 <- renderPlotly({
  
  dataset <- plot_3_dataset()
  
  # Base Plot
  performance_plot <- ggplot(dataset, 
                             aes(x = quarter_year, y = percentage, 
                                 color = category, group = category, 
                                 linetype = category, text = text)) + 
    geom_line(size = 1) +  # Keeps all category lines, including "Trust moving average"
    scale_color_manual(values = c("Trust moving average" = selected_palet_2()[1], 
                                  "Cancer alliance moving average" = selected_palet_2()[2],
                                  "National moving average" = selected_palet_2()[3])) +
    scale_linetype_manual(values = c("Trust moving average" = "solid", 
                                     "Cancer alliance moving average" = "dotted", 
                                     "National moving average" = "dotted")) +
    theme_minimal() +
    labs(title = "Performance (%) Across Quarter Years",
         x = "",
         y = "",
         color = "") +
    scale_y_continuous(labels = scales::percent_format(scale = 100), expand = expansion(mult = c(0.1, 0.1))) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    facet_wrap(~ metric_name, scales = "free_y", labeller = label_wrap_gen(55), nrow = 3) + 
    theme(panel.spacing = unit(0.5, "lines"),
          plot.title = element_text(hjust= 0.5, margin = margin(b = 0)),
          plot.margin = margin(t = 30, r = 10, b = 10, l = 10),
          legend.position = "bottom") +
    guides(color = guide_legend(nrow = 1), linetype = guide_legend(nrow = 1))  

  # Conditional Adjustments
  if (input$marker_choice == "Case Volume") {
    performance_plot <- performance_plot +
      geom_point(data = filter(dataset, category == "Trust moving average"),
                 aes(y = pact, size = denominator, color = category),
                 alpha = 0.8,
                 show.legend = FALSE) +
      scale_size_continuous(range = c(5, 10)) +
      geom_point(data = filter(dataset, category == "Trust moving average" & is.na(denominator)),
                 aes(color = category),
                 shape = 21,  
                 fill = "white",
                 stroke = 1,  
                 size = 4,
                 alpha = 1,
                 show.legend = FALSE)
  } else if (input$marker_choice == "Wilson Score Confidence Interval"){
    performance_plot <- performance_plot + 
      # Add "pact" points
      geom_point(data = filter(dataset, category == "Trust moving average"),
                 aes(y = pact, color = category),
                 shape = 18,
                 size = 3,
                 show.legend = FALSE) +

      # Add confidence intervals
      geom_errorbar(data = filter(dataset, category == "Trust moving average"),
                    aes(ymin = CI_lower, ymax = CI_upper, color = category),
                    width = 0.2,
                    show.legend = FALSE) +
      
      # Show missing denominator points
      geom_point(data = filter(dataset, category == "Trust moving average" & is.na(denominator)),
                 aes(color = category),
                 shape = 21,  
                 fill = "white",
                 stroke = 1,  
                 size = 4,
                 alpha = 1,
                 show.legend = FALSE) 
      
  }

  # Convert to an interactive plotly plot
  interactive_line_plot <- ggplotly(performance_plot, tooltip = "text") %>%
    layout(
      legend = list(
        orientation = "h",  
        x = 0.5,  
        xanchor = "center",  
        y = -0.2  
      )
    )

  interactive_line_plot
})


```

# Dashboard Instructions

## Row {.tabset}

### Overview

```{r}
#| context: server

output$markdown_overall <- renderUI({
  includeMarkdown("instructions_overall.md")
})
```

```{r}

uiOutput("markdown_overall")

```

### Quarterly Summary

```{r}
#| context: server

output$markdown_quarterly_summary <- renderUI({
  includeMarkdown("instructions_summary.md")
})
```

```{r}

uiOutput("markdown_quarterly_summary")

```

### Performance
```{r}
#| context: server

output$markdown_performance <- renderUI({
  includeMarkdown("instructions_performance.md")
})
```


```{r}

uiOutput("markdown_performance")

```
