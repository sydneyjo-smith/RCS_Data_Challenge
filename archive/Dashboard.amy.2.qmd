---
title: "Cancer services"
format: 
  dashboard:
    theme: minty
server: shiny
---


```{r}
#| context: setup
library(ggplot2)
library(readr)
library(shiny)
library(dplyr)
library(tidyr)
library(plotly)
library(bslib)
library(bsicons)
library(reactable)
library(tidyverse)


# Loading in plot data
indicators_trust <- read_csv("../data/processed_data/indicators_trust.csv")
plot_3_data <- read_csv("../data/processed_data/data_plot_3.csv")
plot1<-read_csv("../data/processed_data/plot1.csv")

trust_list <- unique(indicators_trust$trust_name)
audit_list <- unique(indicators_trust$audit_name_full)
quarter_list <- unique(indicators_trust$quarter_year)
```

# Quarterly Summary 

## {.sidebar width="25%"}
```{r}
selectInput('trust_name', 'Select hospital:', trust_list) 
selectInput('quarter_year', 'Select quarter', quarter_list) 

```

## Summary



```{r}
reactableOutput("table_1")
```

```{r}
#| context: server

# Reactive dataset based on user input for Plot 1
plot_1_dataset <- reactive({
  req(input$trust_name, input$quarter_year) 
  plot1 %>%
    filter(trust_name == input$trust_name & quarter_year == input$quarter_year)
})

#function for colour coding
get_color_2 <- function(value, metric_type) {
  if (is.na(value)) return("#808080")  # Default color for NA (gray)
  
  # Define color scales (color-blind friendly)
  red_palette <- hcl.colors(10, "Red-Blue", rev = TRUE)  # Light to dark red
  green_palette <- hcl.colors(10, "TealGrn", rev = TRUE)
  
  # Reverse logic if metric_type = 0
  if (metric_type == 0) {
    temp <- red_palette
    red_palette <- green_palette
    green_palette <- temp
  }
  
  # Compute the scaling for red (negative values)
  if (value < 0) {
    if (value >= -10) {
      color_index <- 2  # Light orange for values between 0 and -10
    } else if (value >= -20) {
      color_index <- 6  # Medium orange for values between -10 and -20
    } else {
      color_index <- 10  # Dark orange for values less than -20
    }
    return(red_palette[color_index])  # Use red gradient with specified index
  }
  
  # Compute the scaling for green (positive values)
  if (value > 0) {
    if (value >= 10) {
      color_index <- 2  # Light green for values between 0 and 10
    } else if (value >= 20) {
      color_index <- 6  # Medium green for values between -10 and 20
    } else {
      color_index <- 10  # Dark green for values less than 20
    }
    return(green_palette[color_index]) 
  }
  
  # Neutral color for 0
  return("white")
}

output$table_1<-renderReactable({reactable(plot_1_dataset(),
                  filterable = TRUE,
                  searchable = TRUE,
                  columns = list(
                    audit=colDef(show=FALSE),
                    trust_code=colDef(show=FALSE),
                    trust_name=colDef(show=FALSE),
                    quarter_year=colDef(show=FALSE),
                    audit_name_full = colDef(show=FALSE),
                    RowType = colDef(show = FALSE),
                    metric_name = colDef(
                      name = "Metric Name",
                      cell = function(value, index) {
                        data <- plot_1_dataset()
                        if (data[index, "RowType"] == "Header") {
                          return(data[index, "audit_name_full"])
                        } else {
                          return(value)
                        }
                      }
                    ),
                    denominator = colDef(name="Case Volume",
                                         cell = function(value, index) {
                                                    data <- plot_1_dataset()
                                                    if (data[index, "RowType"] == "Header") {                                                                 return("")  # Blank for header rows
                                                  } else {
                                                 return(sprintf("%.2f", as.numeric(value)))
                                           }
                                         }
                                      ),
                    mav = colDef(name = "Current Quarter Moving Average Performance (%)",
                                  cell = function(value, index) {
                                                    data <- plot_1_dataset()
                                                    if (data[index, "RowType"] == "Header") {  
                                                  return("")  # Blank for header rows
                                                  } else {
                                                 return(sprintf("%.2f", as.numeric(value)))
                                 
                                   }
                                  }
                                ),
                     variance = colDef(name="Comparison to National Performance (%)",
                                      cell = function(value, index) {
                                        data <- plot_1_dataset()
                                        if (data[index, "RowType"] == "Header") {  
                                         return("")  # Empty cell for header rows
                                        } else {
                                        metric_type <- data[index, "metric_type"]  

                                       color <- get_color_2(as.numeric(value), metric_type) 
                                      return(htmltools::div(
                                             style = paste("background-color:", color, "; padding: 8px;                                                border-radius: 4px;"),
                                             round(as.numeric(value), 2)  
                                          ))
                                        }
                                      }
                    ),
                    variance_prev_quarter = colDef( name="Comparison to Previous Quarter Performance (%)",
                                                    cell = function(value, index) {
                                                       data <- plot_1_dataset()
                                                      if (data[index, "RowType"] == "Header") {  
                                                          return("")  # Empty cell for header rows
                                                              } else {
                                                       metric_type <- data[index, "metric_type"]  
                                                 color <- get_color_2(as.numeric(value), metric_type) 
                                                         return(htmltools::div(
                                               style = paste("background-color:", color, "; padding: 8px;                                                               border-radius: 4px;"),
                                                  round(as.numeric(value), 2) 
                                                        ))
                                                      }
                                                    }
                                                  )
                    ),
                    rowStyle = function(index) {
                            data <- plot_1_dataset()
                          if (data[index, "RowType"] == "Header") { 
                          return(list(
                               background = "blue",
                               color = "white",
                               fontWeight = "bold"
                                ))  
                                } else {
                                return(NULL)
                               }
                             } 
                  )
             })
```
# Performance

## {.sidebar width="25%"}
```{r}
selectInput('trust_name', 'Select hospital:', trust_list) 
selectInput('audit_name_full', 'Select Cancer Audit', audit_list) 

```


## Row {.tabset}
### Data quality

```{r}

```

Plot 2: Data quality plot

### Performance indicators

```{r}
plotlyOutput('plot_3')
```

```{r}
#| context: server

# Reactive dataset based on user input for Plot 3
plot_3_dataset <- reactive({
  req(input$trust_name, input$audit_name_full)  # Ensure inputs exist
  
  plot_3_data %>%
    filter(trust_name == input$trust_name & audit_name_full == input$audit_name_full)
})
 

# output$data <- renderTable({
#   plot_1_dataset()
# })

output$plot_3 <- renderPlotly({
  
  # Render Plot 3
    performance_plot <- ggplot(plot_3_dataset(), aes(x = quarter_year, y = percentage, color = category, group = category, text=text)) +
      geom_line(data = filter(plot_3_dataset(), category == "Trust moving average"), size = 1, ) +  # Lines for ca_mav and na_mav
      geom_line(data = filter(plot_3_dataset(), category != "Trust moving average"), size = 1, linetype="dotted") +  # Lines for ca_mav and na_mav
      geom_point(data = filter(plot_3_dataset(), category == "Trust moving average"),
                 aes(size = denominator),
                 alpha = 0.8) +  # Points for mav, size based on denominator
      scale_size_continuous(range = c(5, 10)) +  # Adjusts point size scale
      geom_point(data = filter(plot_3_dataset(), category == "Trust moving average" & is.na(denominator)),
                 shape = 21,  # Shape 21 allows color & fill customization
                 fill = "white",
                 color = "cornflowerblue",
                 stroke = 1,  # Controls border thickness
                 size = 4,
                 alpha = 1) +
      theme_minimal() +
      labs(title = "",
           x = "Quarter year",
           y = "Percentage",
           color = "Category") +
      scale_y_continuous(labels = scales::percent_format(scale = 100)) +  # Format as percentage
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels for readability
      facet_wrap(~ metric_name, scales = "free_y",labeller = label_wrap_gen(55),nrow = 3)  + # Creates a plot for each metric_name
      theme(panel.spacing = unit(1, "lines"),legend.position="bottom")
    
    # Convert to an interactive plotly plot
    interactive_line_plot <- ggplotly(performance_plot, tooltip = "text")
    interactive_line_plot <- interactive_line_plot %>%
      layout(legend = list(orientation = 'h'))
    interactive_line_plot
})

```

# Hospital summary


## {.sidebar width="25%"}
```{r}
selectInput('trust_name', 'Select hospital:', trust_list) 

```

## Collumn
### Row 1
Average Quarterly Case loads

### Row 2
```{r}

value_box(
  title = "Trust average",
  value = "23 /qtr",
  showcase = bsicons::bs_icon("hospital"),
  theme = "primary"
)
value_box(
  title = "Cancer alliance average",
  value = "34 /qtr",
  showcase = bsicons::bs_icon("geo-alt"),
  theme = "secondary"
)
value_box(
  title = "National average",
  value = "23 /qtr",
  showcase = bsicons::bs_icon("globe"),
  theme = "secondary"
)

```
### Row 2

