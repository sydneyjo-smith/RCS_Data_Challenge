---
title: "Cancer Data"
format: html
runtime: shiny
---
```{r}
#| echo: false
library(reactable)
library(dplyr)
library(tidyverse)
library(shiny)
```
```{r}
#| echo: false


data_choices = read.csv("data_quality.csv")
trust_choices = data_choices %>% distinct(trust_name)
audit_choices = data_choices %>% distinct(audit)
quarter_choices = data_choices %>% distinct(quarter_year)


```

```{r}
#| echo: false
library(shiny)

data_choices = read.csv("data_quality.csv")
choices = data_choices %>% distinct(trust_name)

ui <- fluidPage(
  titlePanel("Dropdown List of Hospitals"),
  sidebarLayout(
    sidebarPanel(
      selectInput("dropdown", "Choose an option:", 
                  choices = trust_choices)
    ),
    mainPanel(
      textOutput("selectedOption")
    )
  )
)

# uiOutput("second_dropdown")


server <- function(input, output, session) {
  output$selectedOption <- renderText({
    paste("You selected:", input$dropdown)
  })
}


shinyApp(ui, server)
```

```{r}
#| echo: false

ui <- fluidPage(
  titlePanel("Dropdown Audit"),
  sidebarLayout(
    sidebarPanel(
      selectInput("dropdown", "Choose an option:", 
                  choices = audit_choices)
    ),
    mainPanel(
      textOutput("selectedOption")
    )
  )
)

server <- function(input, output, session) {
  output$selectedOption <- renderText({
    paste("You selected:", input$dropdown)
  })
}

shinyApp(ui, server)
```

```{r}
#| echo: false

data_choices <- read.csv("data_quality.csv")
trust_choices <- data_choices %>% distinct(trust_name)
audit_choices <- data_choices %>% distinct(audit)  # Adjust accordingly

ui <- fluidPage(
  titlePanel("Dropdown List of Hospitals"),
  
  fluidRow(
    column(6,
      selectInput("dropdown1", "Choose a Trust:", choices = trust_choices)
    ),
    column(6,
      selectInput("dropdown2", "Choose an Audit:", choices = audit_choices)
    )
  ),
  
  textOutput("selectedOptions")
)

server <- function(input, output, session) {
  output$selectedOptions <- renderText({
    paste("You selected:", input$dropdown1, "and", input$dropdown2)
  })
}

shinyApp(ui, server)
```



```{r}
#| echo: false
#| 
library(shiny)
library(dplyr)
library(ggplot2)
library(stringr)

# Load data
data_choices <- read.csv("data_quality.csv")
trust_choices <- unique(data_choices$trust_name)
audit_choices <- unique(data_choices$audit)

# Define UI
ui <- fluidPage(
  titlePanel("Dropdown List of Hospitals"),
  
  fluidRow(
    column(6, selectInput("dropdown1", "Choose a Trust:", choices = trust_choices)),
    column(6, selectInput("dropdown2", "Choose an Audit:", choices = audit_choices))
  ),
  
  plotOutput("barPlot")
)

# Define Server Logic
server <- function(input, output, session) {
  
  filtered_data <- reactive({
    data_choices %>%
      filter(audit == input$dropdown2, trust_name == input$dropdown1) %>%
      mutate(metric_name = str_replace(metric_name, "^Data completeness for ", "")) %>%
      group_by(metric_name, target_met) %>%
      summarise(count = n(), .groups = "drop") %>%
      mutate(target_met = factor(target_met, levels = c("suppressed", "not met", "within 2%", "met")))
  })
  
  output$barPlot <- renderPlot({
    plot_data_bar <- filtered_data()
    
    custom_colors <- c(
      "met" = "#1b9e77",
      "within 2%" = "#d95f02",
      "not met" = "#d90000",
      "suppressed" = "#7570b3"
    )

    ggplot(plot_data_bar, aes(x = str_wrap(metric_name, width = 40), y = count, fill = target_met)) +
      geom_bar(position = "fill", stat = "identity") +
      coord_flip() +
      scale_fill_manual(values = custom_colors) +
      labs(
        title = "Target Breakdown by Quality Indicator",
        x = "Metric Name",
        y = "Percentage",
        fill = "Target Met"
      ) +
      theme_minimal() +
      theme(
        axis.text.y = element_text(size = 10),
        legend.position = "bottom"
      )
  })
}

shinyApp(ui, server)
```
