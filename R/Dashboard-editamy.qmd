---
title: "Cancer services"
format: 
  dashboard:
    theme: minty
server: shiny
---


```{r}
#| context: setup
library(ggplot2)
library(readr)
library(shiny)
library(dplyr)
library(tidyr)
library(plotly)
library(bslib)
library(bsicons)
library(reactable)
library(tidyverse)


# Loading in plot data
indicators_trust <- read_csv("../data/processed_data/indicators_trust.csv")
plot_3_data <- read_csv("../data/processed_data/data_plot_3.csv")
plot1<-read_csv("../data/processed_data/plot1.csv")
plot_2_data<-read_csv("../data/processed_data/data_plot_2.csv")


trust_list <- unique(indicators_trust$trust_name)
audit_list <- unique(indicators_trust$audit_name_full)
quarter_list <- unique(indicators_trust$quarter_year)
palette_list <- c("Standard", "Colour blind mode")
```

# Quarterly Summary 

## {.sidebar width="25%"}
```{r}
selectInput('trust_name', 'Select hospital:', trust_list) 
selectInput('quarter_year', 'Select quarter', quarter_list) 
selectInput('palette_choice', 'Select colour palette', palette_list) 

```

Standard:

<span style="color: green;">Green = stable</span>

<span style="color: red;">Red = needs review</span>

Colour blind mode:

<span style="color: orange;">Orange = stable</span>

<span style="color: blue;">Blue = needs review</span>

## Summary

```{r}
reactableOutput("table_1")
```


```{r}
#| context: server



# Reactive dataset based on user input for Plot 1
plot_1_dataset <- reactive({
  req(input$trust_name, input$quarter_year)  # Ensure inputs exist

  plot1 %>%
    filter(trust_name == input$trust_name & quarter_year == input$quarter_year)
})

# Reactive dataset based on user input for Plot 1
selected_palet <- reactive({
  req(input$palette_choice)  # Ensure inputs exist
  if(input$palette_choice == "Standard"){
      return (function(x) rgb(colorRamp(c("#E42A58","#ffffff", "#A2DA15"))(x), maxColorValue = 255))

  }else if (input$palette_choice == "Colour blind mode"){
      return (function(x) rgb(colorRamp(c("#5C87E4","#ffffff", "#ff9500"))(x), maxColorValue = 255))
  }
})


# Display in reactable with styling
orange_pal <- function(x) rgb(colorRamp(c("#ffe4cc", "#ff9500"))(x), maxColorValue = 255)
gradient_pal <- function(x) rgb(colorRamp(c("#E42A58","#ffffff", "#A2DA15"))(x), maxColorValue = 255)
gradient_pal_2 <- function(x) rgb(colorRamp(c("#5C87E4","#ffffff", "#ff9500"))(x), maxColorValue = 255)
# negative_pal <- function(x) rgb(colorRamp(c("green","#ffffff", "red"))(x), maxColorValue = 255)
# blue_pal <- function(x) rgb(colorRamp(c("green","#ffffff", "red"))(x), maxColorValue = 255)
min_val <- -0.25
max_val <- 0.25

output$table_1 <- renderReactable({
  data <- plot_1_dataset()  # Store reactive dataset in a variable

 table_1<-reactable(data,
                   defaultPageSize = 50,
                   filterable = TRUE,
                   searchable = TRUE,
                   columns = list(
                     audit=colDef(show=FALSE),
                     trust_code=colDef(show=FALSE),
                     trust_name=colDef(show=FALSE),
                     quarter_year=colDef(show=FALSE),
                     audit_name_full = colDef(show=FALSE),
                     metric_type = colDef(show=FALSE),
                     RowType = colDef(show=FALSE),
                     metric_name = colDef(
                       name = "Metric Name"),
                     denominator = colDef(name="Case Volume"),
                     mav = colDef(name = "Current Quarter Moving Average Performance (%)",
                                  format = colFormat(percent = TRUE,digits = 0),
                                  style = function(value, index) {
                                    row_type <- data[index, "RowType"]  # Get RowType
                                    
                                    if (is.na(value)) {
                                      if (row_type == "Header") {
                                        return(list(background = "#78C2AD", color = "white"))  # Blue background for Header NA
                                      } else {
                                        return(list(background = "white", color = "black"))  # White background for non-Header NA
                                      }
                                    }
                                    
                                    # # Normal styling for non-NA values
                                    # normalized <- (value - 0) / (1 - 0)  # Adjust min/max as needed
                                    # normalized <- max(0, min(1, normalized))  # Clamp values
                                    # color <- orange_pal(normalized)
                                    # list(background = color)
                                  }),
                     variance_prev = colDef( name="Comparison to Previous Quarter Performance (%)",
                                                     format = colFormat(percent = TRUE,digits = 0),
                                                     style = function(value, index) {
                                                       row_type <- data[index, "RowType"]  # Get RowType
                                                       
                                                       if (is.na(value)) {
                                                         if (row_type == "Header") {
                                                           return(list(background = "#78C2AD", color = "white"))  # Blue background for Header NA
                                                         } else {
                                                           return(list(background = "white", color = "black"))  # White background for non-Header NA
                                                         }
                                                       }
                                                       
                                                       # Normal styling for non-NA values
                                                       normalized <- (value - (min_val)) / (max_val - (min_val))  # Adjust min/max as needed
                                                       normalized <- max(0, min(1, normalized))  # Clamp values
                                                       color <- selected_palet()(normalized)
                                                       list(background = color)
                                                     }
                     ),
                     variance_ca = colDef( name="Comparison to Previous Cancer Alliance Performance (%)",
                                                     format = colFormat(percent = TRUE,digits = 0),
                                                     style = function(value, index) {
                                                       row_type <- data[index, "RowType"]  # Get RowType
                                                       
                                                       if (is.na(value)) {
                                                         if (row_type == "Header") {
                                                           return(list(background = "#78C2AD", color = "white"))  # Blue background for Header NA
                                                         } else {
                                                           return(list(background = "white", color = "black"))  # White background for non-Header NA
                                                         }
                                                       }
                                                       
                                                       # Normal styling for non-NA values
                                                       normalized <- (value - (min_val)) / (max_val - (min_val))  # Adjust min/max as needed
                                                       normalized <- max(0, min(1, normalized))  # Clamp values
                                                       color <- selected_palet()(normalized)
                                                       list(background = color)
                                                     }
                     ),
                     variance_nat = colDef(name="Comparison to National Performance (%)",
                                       format = colFormat(percent = TRUE,digits = 0),
                                       style = function(value, index) {
                                         row_type <- data[index, "RowType"]  # Get RowType
                                         
                                         if (is.na(value)) {
                                           if (row_type == "Header") {
                                             return(list(background = "#78C2AD", color = "white"))  # Blue background for Header NA
                                           } else {
                                             return(list(background = "white", color = "black"))  # White background for non-Header NA
                                           }
                                         }
                                         
                                         # Normal styling for non-NA values
                                         normalized <- (value - (min_val)) / (max_val - (min_val))  # Adjust min/max as needed
                                         normalized <- max(0, min(1, normalized))  # Clamp values
                                         color <- selected_palet()(normalized)
                                         list(background = color)
                                       }
                     )
                   ),
                   rowStyle = function(index) {
                     if (data$RowType[index] == "Header") {
                       return(list(
                         background = "#78C2AD",
                         color = "white",
                         fontWeight = "bold"
                       ))  # Entire row is blue with white bold text
                     } else {
                       return(NULL)  # Default row style
                     }
                   }
)

table_1
}) 

                   
                    
```


# Performance

## {.sidebar width="25%"}
```{r}
selectInput('trust_name', 'Select hospital:', trust_list) 
selectInput('audit_name_full', 'Select Cancer Audit', audit_list) 

```

## Row {.tabset}

### Data quality

```{r}

plotlyOutput('plot_2')

```


```{r}
#| context: server

# Reactive dataset based on user input for Plot 3
plot_2_dataset <- reactive({
  req(input$trust_name, input$audit_name_full)  # Ensure inputs exist
  
  plot_2_data %>%
    filter(trust_name == input$trust_name & audit_name_full == input$audit_name_full)
})


output$plot_2 <- renderPlotly({

  # Define color mapping for ggplot
color_mapping <- c("Missing" = "#999999", "Below Target" = "#F8766D", "Within 2%" = "#FFD700", "Met Target" = "#00BA38")

# Create ggplot heatmap
gg_heatmap <- ggplot(plot_2_dataset(), aes(x = quarter_year, y = metric_name, fill = as.factor(status))) +
  geom_tile(color = "azure2", size = 0.5) +  # Black gridlines for cell borders
  scale_fill_manual(values = color_mapping, name = "Status",
                    labels = c("Missing", "Below Target", "Within 2%", "Met Target")) +
  labs(title = "Data Quality Indicators Over Time", x = "Quarter-Year", y = "Metric Name") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom")

# Convert to interactive plotly heatmap
plotly_heatmap <- ggplotly(gg_heatmap, tooltip = "text")

# Display interactive heatmap
plotly_heatmap
    
})



```
### Performance indicators

```{r}
plotlyOutput('plot_3')
```

```{r}
#| context: server

# Reactive dataset based on user input for Plot 3
plot_3_dataset <- reactive({
  req(input$trust_name, input$audit_name_full)  # Ensure inputs exist
  
  plot_3_data %>%
    filter(trust_name == input$trust_name & audit_name_full == input$audit_name_full)
})
 

# output$data <- renderTable({
#   plot_1_dataset()
# })

output$plot_3 <- renderPlotly({
  
  # Render Plot 3
    performance_plot <- ggplot(plot_3_dataset(), aes(x = quarter_year, y = percentage, color = category, group = category, text=text)) +
      geom_line(data = filter(plot_3_dataset(), category == "Trust moving average"), size = 1, ) +  # Lines for ca_mav and na_mav
      geom_line(data = filter(plot_3_dataset(), category != "Trust moving average"), size = 1, linetype="dotted") +  # Lines for ca_mav and na_mav
      geom_point(data = filter(plot_3_dataset(), category == "Trust moving average"),
                 aes(size = denominator),
                 alpha = 0.8) +  # Points for mav, size based on denominator
      scale_size_continuous(range = c(5, 10)) +  # Adjusts point size scale
      geom_point(data = filter(plot_3_dataset(), category == "Trust moving average" & is.na(denominator)),
                 shape = 21,  # Shape 21 allows color & fill customization
                 fill = "white",
                 color = "cornflowerblue",
                 stroke = 1,  # Controls border thickness
                 size = 4,
                 alpha = 1) +
      theme_minimal() +
      labs(title = "",
           x = "Quarter year",
           y = "Percentage",
           color = "Category") +
      scale_y_continuous(labels = scales::percent_format(scale = 100)) +  # Format as percentage
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels for readability
      facet_wrap(~ metric_name, scales = "free_y",labeller = label_wrap_gen(55),nrow = 3)  + # Creates a plot for each metric_name
      theme(panel.spacing = unit(1, "lines"),legend.position="bottom")
    
    # Convert to an interactive plotly plot
    interactive_line_plot <- ggplotly(performance_plot, tooltip = "text")
    interactive_line_plot <- interactive_line_plot %>%
      layout(legend = list(orientation = 'h'))
    interactive_line_plot
})

```

# Hospital summary


## {.sidebar width="25%"}
```{r}
selectInput('trust_name', 'Select hospital:', trust_list) 

```

## Collumn
### Row 1
Average Quarterly Case loads

### Row 2
```{r}

value_box(
  title = "Trust average",
  value = "23 /qtr",
  showcase = bsicons::bs_icon("hospital"),
  theme = "primary"
)
value_box(
  title = "Cancer alliance average",
  value = "34 /qtr",
  showcase = bsicons::bs_icon("geo-alt"),
  theme = "secondary"
)
value_box(
  title = "National average",
  value = "23 /qtr",
  showcase = bsicons::bs_icon("globe"),
  theme = "secondary"
)

```
### Row 2

